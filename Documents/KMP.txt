
// tính toán mảng LPS (Longest Prefix Suffix) cho chuỗi pattern
vector<int> computeLPS(const string &pattern) {
    int n = pattern.size();
    vector<int> lps(n, 0);
    int len = 0;
    for (int i = 1; i < n; ) {
        if (pattern[i] == pattern[len]) {
            lps[i] = len + 1;
            len++;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}
 
// Kiểm tra xem chuỗi pattern có xuất hiện như một chuỗi con trong chuỗi text hay không.
bool isSubstring(const string &text, const string &pattern) {
    if (pattern.empty()) return true;
    int n = pattern.size();
    int m = text.size();
    if (m < n) return false;
 
    vector<int> lps = computeLPS(pattern);
    int i = 0, j = 0;
    while (i < m) {
        if (text[i] == pattern[j]) {
            i++;
            j++;
            if (j == n) return true;
        } else {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
    return false;
}
 
// Tìm độ dài phần trùng nhau lớn nhất giữa hậu tố của chuỗi a và tiền tố của chuỗi b.
int findOverlap(const string &a, const string &b) {
    int n = b.size();
    if (n == 0) return 0;
    vector<int> lps = computeLPS(b);
    int j = 0;
    for (char c : a) {
        while (j > 0 && c != b[j]) {
            j = lps[j - 1];
        }
        if (c == b[j]) {
            j++;
        }
    }
    return j;
}